{"version":3,"sources":["types/ErrorText.ts","api.tsx","features/weathers.ts","app/store.ts","app/hooks.ts","data/cityList.tsx","components/MainSelect/MainSelect.tsx","components/Loader/Loader.tsx","components/WeatherCard/WeatherCard.tsx","components/WeathersList/WeathersList.tsx","pages/HomePage/HomePage.tsx","components/Forecast/Forecast.tsx","components/Details/Details.tsx","pages/DetailsPage/DetailsPage.tsx","pages/NotFoundPage/NotFoundPage.tsx","App.tsx","index.tsx"],"names":["ErrorText","BASE_URL","apiKey","process","wait","delay","Promise","resolve","setTimeout","getWeather","id","a","url","fetch","then","res","json","getForecast","initialState","weathers","loading","error","NONE","citiesIdsJSON","localStorage","getItem","citiesIds","JSON","parse","init","createAsyncThunk","all","map","cityId","addNew","updateOne","weathersSlice","createSlice","name","reducers","set","state","action","payload","delete","newWeathers","filter","weather","ids","setItem","stringify","setError","extraReducers","builder","addCase","pending","fulfilled","length","cod","LOAD_WEATHER","rejected","LOAD_ONE","actions","store","configureStore","reducer","useAppDispatch","useDispatch","useAppSelector","useSelector","cityList","country","coord","lon","lat","MainSelect","dispatch","useState","setId","isButtonDisabled","includes","className","FormControl","fullWidth","InputLabel","Select","sx","backgroundColor","labelId","value","label","onChange","event","target","city","MenuItem","Button","variant","onClick","weatherActions","disabled","Loader","card","CircularProgress","margin","WeatherCard","isLoad","setIsLoad","dt","sys","main","temp","temp_min","temp_max","icon","handleClickUpdate","UPDATE_ONE","Card","CardContent","Typography","IconButton","Close","titleAccess","src","alt","to","Date","toUTCString","WeathersList","color","HomePage","align","Forecast","temperaturesByHour","setTemperatureByHour","dates","setDates","isLoading","setIsLoading","dateOptions","weekday","month","day","hour","minute","loadForecast","loadedForecast","forecast","list","entry","today","tomorrow","setDate","getDate","tomorrowDateStr","toISOString","slice","todayDateStr","dt_txt","item","toLocaleString","LOAD_FORECAST","data","labels","Array","from","_","i","datasets","borderColor","borderWidth","useEffect","Box","position","width","options","scales","y","beginAtZero","Details","date","currentWeather","description","feels_like","pressure","humidity","sea_level","grnd_level","visibility","speed","wind","rain","rain1h","clouds","sunrise","sunset","transformSunTime","time","hours","getUTCHours","minutes","getUTCMinutes","seconds","getUTCSeconds","toString","padStart","DetailsPage","useParams","navigate","useNavigate","find","display","alignItems","justifyContent","paddingBottom","NotFoundPage","App","path","element","replace","index","Snackbar","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","Alert","severity","theme","createTheme","palette","primary","secondary","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.5992e031.chunk.js","sourcesContent":["export enum ErrorText {\n  LOAD_WEATHER = 'Unable to load data. Try again later!',\n  LOAD_ONE = 'Unable to load new city weather. Try again later!',\n  UPDATE_ONE = 'Unable to update weather. Try again later!',\n  LOAD_FORECAST = 'Unable to load forecast. Try again later!',\n  NONE = '',\n}\n","const BASE_URL = 'https://api.openweathermap.org';\nconst apiKey = process.env.REACT_APP_WEATHER_API_KEY;\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nexport const getWeather = async (id: string) => {\n  await wait(500);\n\n  const url = `${BASE_URL}/data/2.5/weather?id=${id}&appid=${apiKey}&units=metric`;\n\n  return fetch(url).then(res => res.json());\n};\n\nexport const getForecast = async (id: string) => {\n  await wait(500);\n\n  const url = `${BASE_URL}/data/2.5/forecast?id=${id}&appid=${apiKey}&units=metric`;\n\n  return fetch(url).then(res => res.json());\n};\n","import { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';\nimport { WeatherType } from '../types/WeatherType';\nimport { ErrorText } from '../types/ErrorText';\nimport { getWeather } from '../api';\n\ntype weathersStateType = {\n  weathers: WeatherType[],\n  loading: boolean,\n  error: ErrorText,\n};\n\nconst initialState: weathersStateType = {\n  weathers: [],\n  loading: false,\n  error: ErrorText.NONE,\n};\n\nconst citiesIdsJSON = localStorage.getItem('citiesIds');\nconst citiesIds: number[] = (citiesIdsJSON ? JSON.parse(citiesIdsJSON) : []);\n\nexport const init = createAsyncThunk('weathers/fetch', async () => {\n  return Promise.all(citiesIds.map(cityId => getWeather(`${cityId}`)));\n});\n\nexport const addNew = createAsyncThunk('weather/fetch', (id: string) => getWeather(id));\n\nexport const updateOne = createAsyncThunk('weather/fetchUpdate', async (id: string) => getWeather(id));\n\nconst weathersSlice = createSlice({\n  name: 'weathers',\n  initialState,\n  reducers: {\n    set: (state, action: PayloadAction<WeatherType[]>) => {\n      return { ...state, weathers: action.payload };\n    },\n    delete: (state, action: PayloadAction<number>) => {\n      const newWeathers = state.weathers\n        .filter(weather => weather.id !== action.payload);\n      const ids = newWeathers.map(weather => weather.id);\n\n      localStorage.setItem('citiesIds', JSON.stringify(ids));\n\n      return { ...state, weathers: newWeathers };\n    },\n    setError: (state, action: PayloadAction<ErrorText>) => {\n      return { ...state, error: action.payload };\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(init.pending, (state) => {\n      return ({ ...state, loading: true });\n    });\n\n    builder.addCase(init.fulfilled, (state, action) => {\n      if (citiesIds.length === 0) {\n        return ({ ...state, weathers: action.payload, loading: false });\n      }\n\n      if (action.payload[0]?.cod === 200) {\n        return ({ ...state, weathers: action.payload, loading: false });\n      }\n\n      return ({ error: ErrorText.LOAD_WEATHER, weathers: [], loading: false });\n    });\n\n    builder.addCase(init.rejected, (state) => {\n      return ({ ...state, error: ErrorText.LOAD_WEATHER, loading: false });\n    });\n\n    builder.addCase(addNew.pending, (state) => {\n      return ({ ...state, loading: true });\n    });\n\n    builder.addCase(addNew.fulfilled, (state, action) => {\n      if (action.payload?.cod === 200) {\n        const ids = state.weathers.map(weather => weather.id);\n\n        localStorage.setItem('citiesIds', JSON.stringify([...ids, action.payload.id]));\n\n        return ({\n          ...state,\n          weathers: [...state.weathers, action.payload],\n          loading: false,\n        });\n      }\n\n      return ({ error: ErrorText.LOAD_ONE, weathers: [...state.weathers], loading: false });\n    });\n\n    builder.addCase(addNew.rejected, (state) => {\n      return ({ ...state, error: ErrorText.LOAD_ONE, loading: false });\n    });\n\n    builder.addCase(updateOne.fulfilled, (state, action) => {\n      return ({\n        ...state,\n        weathers: state.weathers\n          .map(weather => (weather.id === action.payload.id ? action.payload : weather)),\n      });\n    });\n  },\n});\n\nexport default weathersSlice.reducer;\nexport const { actions } = weathersSlice;\n","import { configureStore } from '@reduxjs/toolkit';\nimport weathersSlice from '../features/weathers';\n\nexport const store = configureStore({\n  reducer: {\n    weathers: weathersSlice,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { CityType } from '../types/CityType';\n\nexport const cityList: CityType[] = [\n  {\n    id: 702550,\n    name: 'Lviv',\n    state: '',\n    country: 'UA',\n    coord: {\n      lon: 24.023239,\n      lat: 49.838261,\n    },\n  },\n  {\n    id: 707471,\n    name: 'Ivano-Frankivsk',\n    state: '',\n    country: 'UA',\n    coord: {\n      lon: 24.709721,\n      lat: 48.921501,\n    },\n  },\n  {\n    id: 703448,\n    name: 'Kyiv',\n    state: '',\n    country: 'UA',\n    coord: {\n      lon: 30.516666,\n      lat: 50.433334,\n    },\n  }, {\n    id: 687700,\n    name: 'Zaporizhia',\n    state: '',\n    country: 'UA',\n    coord: {\n      lon: 35.183331,\n      lat: 47.816669,\n    },\n  },\n  {\n    id: 691650,\n    name: 'Ternopil',\n    state: '',\n    country: 'UA',\n    coord: {\n      lon: 25.60556,\n      lat: 49.555889,\n    },\n  },\n  {\n    id: 698740,\n    name: 'Odessa',\n    state: '',\n    country: 'UA',\n    coord: {\n      lon: 30.732622,\n      lat: 46.477474,\n    },\n  },\n  {\n    id: 710735,\n    name: 'Chernihiv',\n    state: '',\n    country: 'UA',\n    coord: {\n      lon: 31.28488,\n      lat: 51.505508,\n    },\n  },\n  {\n    id: 706483,\n    name: 'Kharkiv',\n    state: '',\n    country: 'UA',\n    coord: {\n      lon: 36.25,\n      lat: 50.0,\n    },\n  },\n  {\n    id: 696643,\n    name: 'Poltava',\n    state: '',\n    country: 'UA',\n    coord: {\n      lon: 34.54073,\n      lat: 49.593731,\n    },\n  },\n];\n","import React, { useState } from 'react';\nimport {\n  FormControl, InputLabel, Select, MenuItem, SelectChangeEvent, Button,\n} from '@mui/material';\nimport { cityList } from '../../data/cityList';\nimport * as weatherActions from '../../features/weathers';\nimport { useAppDispatch } from '../../app/hooks';\nimport './MainSelect.scss';\n\nexport const MainSelect = () => {\n  const dispatch = useAppDispatch();\n  const [id, setId] = useState('');\n  const citiesIdsJSON = localStorage.getItem('citiesIds');\n  const citiesIds = citiesIdsJSON ? JSON.parse(citiesIdsJSON) : [];\n  const isButtonDisabled = citiesIds.includes(id);\n  const handleChange = (event: SelectChangeEvent) => {\n    setId(event.target.value as string);\n  };\n\n  const handleClickAdd = () => {\n    setId('');\n    if (id) {\n      dispatch(weatherActions.addNew(id));\n    }\n  };\n\n  return (\n    <div className=\"main-select\">\n      <FormControl fullWidth>\n        <InputLabel id=\"demo-simple-select-label\">Select City</InputLabel>\n        <Select\n          sx={{ backgroundColor: 'white' }}\n          labelId=\"demo-simple-select-label\"\n          id=\"demo-simple-select\"\n          value={id}\n          label=\"Select City\"\n          onChange={handleChange}\n        >\n          {cityList.map(city => (\n            <MenuItem\n              value={city.id}\n              key={city.name}\n            >\n              {city.name}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n\n      <Button\n        className=\"main-select__button\"\n        variant=\"contained\"\n        onClick={handleClickAdd}\n        disabled={isButtonDisabled}\n      >\n        {isButtonDisabled ? 'Added yet' : 'Add to selected'}\n      </Button>\n    </div>\n  );\n};\n","import { CircularProgress } from '@mui/material';\nimport React from 'react';\nimport './Loader.scss';\n\ntype Props = {\n  card?: boolean,\n};\n\nexport const Loader: React.FC<Props> = ({ card }) => (\n  <div\n    className={card ? 'loader loader--card' : 'loader'}\n  >\n    <CircularProgress\n      sx={{\n        margin: 'auto',\n      }}\n    />\n  </div>\n);\n","import React, { useState } from 'react';\nimport {\n  Card, CardContent, Typography, IconButton, Button,\n} from '@mui/material';\nimport { Link } from 'react-router-dom';\nimport { Close } from '@mui/icons-material';\nimport ReplayIcon from '@mui/icons-material/Replay';\nimport { WeatherType } from '../../types/WeatherType';\nimport * as weatherActions from '../../features/weathers';\nimport { useAppDispatch } from '../../app/hooks';\nimport { ErrorText } from '../../types/ErrorText';\nimport { Loader } from '../Loader';\nimport './WeatherCard.scss';\n\ntype Props = {\n  weather: WeatherType;\n};\n\nexport const WeatherCard: React.FC<Props> = ({ weather }) => {\n  const [isLoad, setIsLoad] = useState(false);\n  const {\n    name,\n    dt,\n    id,\n    sys: { country },\n    main: { temp, temp_min, temp_max },\n    weather: [{ main, icon }],\n  } = weather;\n  const dispatch = useAppDispatch();\n\n  const handleClickUpdate = async () => {\n    try {\n      setIsLoad(true);\n      await dispatch(weatherActions.updateOne(`${id}`));\n    } catch {\n      dispatch(weatherActions.actions.setError(ErrorText.UPDATE_ONE));\n    } finally {\n      setIsLoad(false);\n    }\n  };\n\n  const handleClickDelete = () => {\n    dispatch(weatherActions.actions.delete(id));\n  };\n\n  return (\n    <Card className=\"weather-card\">\n      {isLoad && (<Loader card />)}\n\n      <CardContent>\n        <div className=\"weather-card__row\">\n          <Typography\n            variant=\"h5\"\n          >\n            {`${name}, ${country}`}\n          </Typography>\n\n          <IconButton onClick={handleClickDelete}>\n            <Close titleAccess=\"delete\" />\n          </IconButton>\n        </div>\n\n        <div className=\"weather-card__row\">\n          <Typography variant=\"h4\">{main}</Typography>\n\n          <img\n            src={`https://openweathermap.org/img/wn/${icon}@2x.png`}\n            alt=\"weather icon\"\n          />\n\n          <div className=\"weather-card__info\">\n            <Typography variant=\"subtitle2\">\n              {`Max: ${temp_max}°C`}\n            </Typography>\n\n            <Typography variant=\"subtitle2\">\n              {`Min: ${temp_min}°C`}\n            </Typography>\n\n            <Typography variant=\"h6\">\n              {`${temp}°C`}\n            </Typography>\n          </div>\n        </div>\n\n        <div className=\"weather-card__row\">\n          <Button className=\"weather-card__button\">\n            <Link to={`/${id}`} className=\"weather-card__link\">\n              Details\n            </Link>\n          </Button>\n\n          <Typography variant=\"subtitle1\">\n            {new Date(dt * 1000).toUTCString()}\n          </Typography>\n\n          <IconButton onClick={handleClickUpdate}>\n            <ReplayIcon titleAccess=\"update\" />\n          </IconButton>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n","import React from 'react';\nimport { Typography } from '@mui/material';\nimport { useAppSelector } from '../../app/hooks';\nimport { WeatherCard } from '../WeatherCard';\nimport './WeathersList.scss';\n\nexport const WeathersList = () => {\n  const { weathers } = useAppSelector(state => state.weathers);\n\n  return (\n    <div className=\"weathers-list\">\n      {weathers.length > 0\n        ? weathers.map(weather => (\n          <WeatherCard\n            key={weather.name}\n            weather={weather}\n          />\n        ))\n        : (\n          <Typography\n            variant=\"h5\"\n            color=\"primary\"\n            className=\"weathers-list__not-found\"\n          >\n            Please, add cities\n          </Typography>\n        )}\n    </div>\n  );\n};\n","import { Typography } from '@mui/material';\nimport React from 'react';\nimport { MainSelect } from '../../components/MainSelect';\nimport { WeathersList } from '../../components/WeathersList';\n\nexport const HomePage = () => {\n  return (\n    <div className=\"container\">\n      <Typography variant=\"h2\" align=\"center\" color=\"primary\">\n        Weather app\n      </Typography>\n\n      <MainSelect />\n\n      <WeathersList />\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { ChartOptions } from 'chart.js';\nimport { Box, Typography } from '@mui/material';\nimport { getForecast } from '../../api';\nimport { ErrorText } from '../../types/ErrorText';\nimport { useAppDispatch } from '../../app/hooks';\nimport { actions } from '../../features/weathers';\nimport { Loader } from '../Loader';\nimport { ForecastType } from '../../types/ForecastType';\n\ntype Props = {\n  cityId: number,\n};\n\nexport const Forecast: React.FC<Props> = ({ cityId }) => {\n  const dispatch = useAppDispatch();\n  const [temperaturesByHour, setTemperatureByHour] = useState<number[]>();\n  const [dates, setDates] = useState<string[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const dateOptions: Intl.DateTimeFormatOptions = {\n    weekday: 'short',\n    month: 'short',\n    day: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n  };\n\n  const todayTomorrowForecast = (forecast: ForecastType) => {\n    return forecast.list\n      .filter((entry: { dt_txt: string | string[]; }) => {\n        const today = new Date();\n        const tomorrow = new Date();\n\n        tomorrow.setDate(tomorrow.getDate() + 1);\n        const tomorrowDateStr = tomorrow.toISOString().slice(0, 10);\n        const todayDateStr = today.toISOString().slice(0, 10);\n\n        return (\n          entry.dt_txt.includes(tomorrowDateStr) || entry.dt_txt.includes(todayDateStr)\n        );\n      });\n  };\n\n  const loadForecast = async () => {\n    try {\n      setIsLoading(true);\n      const loadedForecast = await getForecast(`${cityId}`);\n\n      setTemperatureByHour(todayTomorrowForecast(loadedForecast)\n        .map((item: { main: { temp: number; }; }) => item.main.temp));\n\n      setDates(loadedForecast.list.map((item: { dt: number }) => new Date(item.dt * 1000)\n        .toLocaleString('en-US', dateOptions)));\n    } catch {\n      dispatch(actions.setError(ErrorText.LOAD_FORECAST));\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const data = {\n    labels: Array.from(Array(temperaturesByHour?.length), (_, i) => dates[i]),\n    datasets: [\n      {\n        label: 'Temperature,°C',\n        data: temperaturesByHour,\n        backgroundColor: 'rgba(75,192,192,0.2)',\n        borderColor: 'rgba(75,192,192,1)',\n        borderWidth: 1,\n      },\n    ],\n  };\n\n  const options = {\n    scales: {\n      y: {\n        beginAtZero: true,\n      },\n    },\n  };\n\n  useEffect(() => {\n    loadForecast();\n  }, []);\n\n  return (\n    <Box position=\"relative\">\n      {isLoading && <Loader card />}\n      <Typography\n        variant=\"h5\"\n        width=\"100%\"\n        align=\"center\"\n      >\n        Forecast for today and tomorrow\n      </Typography>\n      <Bar data={data} options={options as ChartOptions} />\n    </Box>\n  );\n};\n","import React from 'react';\nimport { Typography } from '@mui/material';\nimport AirIcon from '@mui/icons-material/Air';\nimport VisibilityOutlinedIcon from '@mui/icons-material/VisibilityOutlined';\nimport WaterDropIcon from '@mui/icons-material/WaterDrop';\nimport WavesOutlinedIcon from '@mui/icons-material/WavesOutlined';\nimport CloudOutlinedIcon from '@mui/icons-material/CloudOutlined';\nimport CompressIcon from '@mui/icons-material/Compress';\nimport LandscapeOutlinedIcon from '@mui/icons-material/LandscapeOutlined';\nimport BeachAccessOutlinedIcon from '@mui/icons-material/BeachAccessOutlined';\nimport WbTwilightIcon from '@mui/icons-material/WbTwilight';\nimport Brightness4OutlinedIcon from '@mui/icons-material/Brightness4Outlined';\nimport './Details.scss';\nimport { WeatherType } from '../../types/WeatherType';\n\nimport { Forecast } from '../Forecast';\n\ntype Props = {\n  currentWeather: WeatherType,\n};\n\nexport const Details: React.FC<Props> = ({ currentWeather }) => {\n  const {\n    coord: { lon, lat },\n    weather: [{ main, description, icon }],\n    main: {\n      temp,\n      feels_like,\n      temp_min,\n      temp_max,\n      pressure,\n      humidity,\n      sea_level,\n      grnd_level,\n    },\n    visibility,\n    wind: { speed },\n    rain: { '1h': rain1h } = {},\n    clouds: { all },\n    dt,\n    sys: { country, sunrise, sunset },\n    name,\n  } = currentWeather;\n\n  const transormDate = (date: number) => new Date(date * 1000).toUTCString();\n  const transformSunTime = (date: number) => {\n    const time = new Date(date * 1000);\n    const hours = time.getUTCHours();\n    const minutes = time.getUTCMinutes();\n    const seconds = time.getUTCSeconds();\n\n    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <div className=\"details\">\n      <div className=\"details__row\">\n        <Typography>{transormDate(dt)}</Typography>\n        <Typography>{`${lat}°N, ${lon}°E`}</Typography>\n      </div>\n\n      <div className=\"details__row\">\n        <Typography variant=\"h4\">{name}</Typography>\n        <Typography variant=\"h4\">{country}</Typography>\n      </div>\n\n      <div className=\"details__row\">\n        <div className=\"details__info\">\n          <div className=\"details__item\">\n            <WaterDropIcon titleAccess=\"Humidity\" />\n            <Typography>{`${humidity}%`}</Typography>\n          </div>\n\n          {rain1h && (\n            <div className=\"details__item\">\n              <BeachAccessOutlinedIcon titleAccess=\"Rain volume\" />\n              <Typography>{`${rain1h}mm`}</Typography>\n            </div>\n          )}\n\n          <div className=\"details__item\">\n            <CompressIcon titleAccess=\"Pressure\" />\n            <Typography>{`${pressure}hPa`}</Typography>\n          </div>\n\n          <div className=\"details__item\">\n            <AirIcon titleAccess=\"Wind\" />\n            <Typography>{`${speed}m/s`}</Typography>\n          </div>\n\n          <div className=\"details__item\">\n            <CloudOutlinedIcon titleAccess=\"Cloudiness\" />\n            <Typography>{`${all}%`}</Typography>\n          </div>\n\n          <div className=\"details__item\">\n            <VisibilityOutlinedIcon titleAccess=\"Visibility\" />\n            <Typography>{`${visibility}m`}</Typography>\n          </div>\n\n          {sea_level && (\n            <div className=\"details__item\">\n              <WavesOutlinedIcon titleAccess=\"Sea level\" />\n              <Typography>{`${sea_level}m`}</Typography>\n            </div>\n          )}\n\n          {grnd_level && (\n            <div className=\"details__item\">\n              <LandscapeOutlinedIcon titleAccess=\"Ground level\" />\n              <Typography>{`${grnd_level}m`}</Typography>\n            </div>\n          )}\n\n          <div className=\"details__item\">\n            <WbTwilightIcon titleAccess=\"Sunrise\" />\n            <Typography>{`${transformSunTime(sunrise)}`}</Typography>\n          </div>\n\n          <div className=\"details__item\">\n            <Brightness4OutlinedIcon titleAccess=\"Sunset\" />\n            <Typography>{`${transformSunTime(sunset)}`}</Typography>\n          </div>\n        </div>\n\n        <div className=\"details__item\">\n          <img\n            src={`https://openweathermap.org/img/wn/${icon}@2x.png`}\n            alt=\"weather icon\"\n          />\n\n          <div className=\"details__info\">\n            <Typography variant=\"h4\">{main}</Typography>\n            <Typography>{description}</Typography>\n            <Typography variant=\"h4\">{`${temp}°C`}</Typography>\n          </div>\n        </div>\n\n        <div className=\"details__info\">\n          <Typography>{`Feels like: ${feels_like}°C`}</Typography>\n          <Typography>{`Max: ${temp_max}°C`}</Typography>\n          <Typography>{`Min: ${temp_min}°C`}</Typography>\n        </div>\n      </div>\n\n      <Forecast cityId={currentWeather.id} />\n    </div>\n  );\n};\n","import React from 'react';\nimport { useParams } from 'react-router';\nimport { useNavigate } from 'react-router-dom';\nimport { Box, IconButton, Typography } from '@mui/material';\nimport ArrowBackIosNewRoundedIcon from '@mui/icons-material/ArrowBackIosNewRounded';\nimport { Details } from '../../components/Details';\nimport { useAppSelector } from '../../app/hooks';\n\nexport const DetailsPage = () => {\n  const { cityId = '' } = useParams();\n  const navigate = useNavigate();\n  const { weathers } = useAppSelector(state => state.weathers);\n  const currentWeather = weathers.find(weather => `${weather.id}` === cityId);\n\n  const handleBackInHistory = () => navigate(-1);\n\n  return (\n    <div className=\"container\">\n      <Box\n        sx={{\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n          paddingBottom: '20px',\n        }}\n      >\n        <IconButton onClick={handleBackInHistory}>\n          <ArrowBackIosNewRoundedIcon titleAccess=\"Turn back\" />\n        </IconButton>\n\n        <Typography variant=\"h4\" color=\"primary\">\n          Weather details\n        </Typography>\n      </Box>\n\n      {currentWeather\n        && (<Details currentWeather={currentWeather} />)}\n    </div>\n  );\n};\n","import React from 'react';\nimport { Typography } from '@mui/material';\n\nexport const NotFoundPage = () => {\n  return (\n    <div className=\"container\">\n      <Typography\n        variant=\"h2\"\n        width=\"100%\"\n        align=\"center\"\n        color=\"primary\"\n      >\n        Page not found\n      </Typography>\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { Navigate, Route, Routes } from 'react-router';\nimport { Alert, Snackbar } from '@mui/material';\nimport './App.scss';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport * as weatherActions from './features/weathers';\nimport { HomePage } from './pages/HomePage';\nimport { Loader } from './components/Loader';\nimport { DetailsPage } from './pages/DetailsPage';\nimport { ErrorText } from './types/ErrorText';\nimport { NotFoundPage } from './pages/NotFoundPage';\n\nexport const App: React.FC = () => {\n  const { loading, error } = useAppSelector(state => state.weathers);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    dispatch(weatherActions.init());\n  }, []);\n\n  return (\n    <>\n      {loading && <Loader />}\n      <section className=\"app\">\n        <Routes>\n          <Route path=\"*\" element={<NotFoundPage />} />\n          <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n          <Route index element={<HomePage />} />\n\n          <Route path=\"/:cityId\" element={<DetailsPage />} />\n        </Routes>\n      </section>\n\n      <Snackbar\n        open={error !== ErrorText.NONE}\n        autoHideDuration={5000}\n        onClose={() => dispatch(weatherActions.actions.setError(ErrorText.NONE))}\n        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n      >\n        <Alert severity=\"error\">\n          {error}\n        </Alert>\n      </Snackbar>\n    </>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport { createTheme, ThemeProvider } from '@mui/material';\nimport { Provider } from 'react-redux';\nimport { store } from './app/store';\nimport { App } from './App';\nimport './index.scss';\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#41B3A3',\n    },\n    secondary: {\n      main: '#E27D60',\n    },\n  },\n});\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <ThemeProvider theme={theme}>\n        <HashRouter>\n          <App />\n        </HashRouter>\n      </ThemeProvider>\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}